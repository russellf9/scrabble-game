{"version":3,"sources":["constants.ts","components/drag-and-drop/movable-item/MovableItem.tsx","components/tile/TileComponent.tsx","components/tile-rack/TileRack.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ITEM_TYPES","TILES_NAMES","INITIAL","allTiles","letter","score","count","originalTiles","map","obj","index","id","name","currentParent","MovableItem","children","changeItemParent","moveItemHandler","ref","useRef","useDrop","accept","hover","item","monitor","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","drop","useDrag","type","end","dropResult","getDropResult","didDrop","newParent","collect","isDragging","opacity","drag","className","style","TileComponent","TileRack","tileRackType","isOver","canDrop","App","isMobile","window","innerWidth","SELECTION","useState","items","setItems","changeItemParentHandler","currentItem","console","log","prevState","e","dragItem","coppiedStateArray","prevItem","splice","returnItemsForTileRack","parentName","filter","DndProvider","backend","TouchBackend","HTML5Backend","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","state","action","types","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9349327d.chunk.js","sourcesContent":["import { Tile, TileItemType } from \"./interfaces\";\n\nexport const ITEM_TYPES = {\n  DRAGGABLE_ITEM: \"draggable_item\",\n};\n\nexport const TILES_NAMES = {\n  INITIAL: \"Initial\",\n  SELECTION: \"Selection\",\n};\n\nconst { INITIAL } = TILES_NAMES;\n\nconst allTiles: Tile[] = [\n  { letter: \"e\", score: 1, count: 12 },\n  { letter: \"a\", score: 1, count: 9 },\n  { letter: \"i\", score: 1, count: 9 },\n  { letter: \"o\", score: 1, count: 8 },\n  { letter: \"n\", score: 1, count: 6 },\n  { letter: \"r\", score: 1, count: 6 },\n  { letter: \"t\", score: 1, count: 6 },\n  { letter: \"l\", score: 1, count: 4 },\n  { letter: \"s\", score: 1, count: 4 },\n  { letter: \"u\", score: 1, count: 4 },\n\n  { letter: \"d\", score: 2, count: 4 },\n  { letter: \"g\", score: 2, count: 3 },\n\n  { letter: \"b\", score: 3, count: 2 },\n  { letter: \"c\", score: 3, count: 2 },\n  { letter: \"m\", score: 3, count: 2 },\n  { letter: \"p\", score: 3, count: 2 },\n\n  { letter: \"f\", score: 4, count: 2 },\n  { letter: \"h\", score: 4, count: 2 },\n  { letter: \"v\", score: 4, count: 2 },\n  { letter: \"w\", score: 4, count: 2 },\n  { letter: \"y\", score: 4, count: 2 },\n\n  { letter: \"k\", score: 5, count: 1 },\n\n  { letter: \"j\", score: 8, count: 1 },\n  { letter: \"x\", score: 8, count: 1 },\n\n  { letter: \"q\", score: 10, count: 1 },\n  { letter: \"z\", score: 10, count: 1 },\n];\nconst initialLetters: Tile[] = [\n  allTiles[0],\n  allTiles[25],\n  allTiles[3],\n  allTiles[3],\n  allTiles[8],\n  allTiles[22],\n  allTiles[7],\n];\n\n// TODO keep here for the time being\nexport const originalTiles: TileItemType[] = initialLetters.map(\n  (obj, index) => {\n    return {\n      ...obj,\n      id: index,\n      name: `${index}-${obj.letter}`,\n      currentParent: INITIAL,\n    };\n  }\n);\n\n// utility function to test the values in the model\nexport const displayItems = (items: any) => {\n  items.forEach((item: any) => {\n    console.log(\"item \", item);\n  });\n};\n","import * as React from \"react\";\nimport { useRef } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemType } from \"../../../interfaces\";\nimport { ITEM_TYPES } from \"../../../constants\";\n\nexport interface MovavbleItemProps {\n  name: string;\n  index: number;\n  currentParent: string;\n  children: JSX.Element;\n}\n\nexport interface MovableItemDispatchProps {\n  changeItemParent: (currentItem: ItemType, newParent: string) => void;\n  moveItemHandler: (dragIndex: number, hoverIndex: number) => void;\n}\n\ntype Props = MovavbleItemProps & MovableItemDispatchProps;\n\nexport const MovableItem = ({\n  name,\n  index,\n  currentParent,\n  children,\n  changeItemParent,\n  moveItemHandler,\n}: Props): JSX.Element => {\n  const ref = useRef(null);\n\n  const [, drop] = useDrop({\n    accept: ITEM_TYPES.DRAGGABLE_ITEM,\n    hover(item: any, monitor) {\n      if (!ref.current) {\n        return;\n      }\n\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      const current = ref.current;\n\n      if (!current) {\n        return;\n      }\n\n      const element = current as Element;\n      const hoverBoundingRect = element.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n\n      const offsetY = clientOffset ? clientOffset.y : 0;\n      const hoverClientY = offsetY - hoverBoundingRect.top;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      // Time to actually perform the action\n      moveItemHandler(dragIndex, hoverIndex);\n    },\n  });\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { index, name, currentParent, type: ITEM_TYPES.DRAGGABLE_ITEM },\n    end: (item, monitor) => {\n      const dropResult = monitor.getDropResult();\n\n      // TODO remove some of the consts here\n      const didDrop = monitor.didDrop();\n\n      if (item && dropResult && dropResult.name) {\n        const newParent = dropResult.name;\n        changeItemParent(item, newParent);\n      }\n    },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const opacity = isDragging ? 0.4 : 1;\n\n  drag(drop(ref));\n\n  return (\n    <div ref={ref} className=\"movable-item\" style={{ opacity }}>\n      {children}\n    </div>\n  );\n};\n","import { ReactElement } from \"react\";\nimport { Tile } from \"../../interfaces\";\n\ntype Props = Tile;\n\nexport const TileComponent = ({ letter, score }: Props): ReactElement<Tile> => {\n  return (\n    <div className=\"center-box tile\">\n      <h1>{letter}</h1>\n      <p className=\"score\">{score}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { ITEM_TYPES } from \"../../constants\";\n\n//TODO Get this to work\n//type TileRackType = TILES_NAMES.INITIAL | TILES_NAMES.SELECTION;\n\ntype TileRackType = \"Initial\" | \"Selection\";\n\nexport interface TileRackProps {\n  tileRackType: TileRackType | string;\n  className: string;\n  children: JSX.Element[];\n}\n\ntype Props = TileRackProps;\n\nexport const TileRack = ({\n  tileRackType,\n  className,\n  children,\n}: Props): JSX.Element => {\n  // TODO - how can I tidy up the `isOver` and `canDrop` ?\n  const [{ isOver, canDrop }, drop] = useDrop({\n    accept: ITEM_TYPES.DRAGGABLE_ITEM,\n    drop: () => ({ name: tileRackType }),\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    }),\n    canDrop: (item: any) => {\n      // only drop if the item is moving to a new Parent (TODO double check this)\n      return item.currentParent !== tileRackType;\n    },\n  });\n  return (\n    <div ref={drop} className={className}>\n      {children}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport \"./App.css\";\nimport { MovableItem } from \"./components/drag-and-drop/movable-item/MovableItem\";\nimport { TileComponent } from \"./components/tile/TileComponent\";\nimport { TileRack } from \"./components/tile-rack/TileRack\";\nimport { TILES_NAMES, originalTiles } from \"./constants\";\nimport { ItemType } from \"./interfaces\";\n\nfunction App() {\n  const isMobile = window.innerWidth < 600;\n\n  const { INITIAL, SELECTION } = TILES_NAMES;\n\n  const [items, setItems] = useState(originalTiles);\n\n  // TODO create type for `currentItem`\n  const changeItemParentHandler = (\n    currentItem: ItemType,\n    newParent: string\n  ): void => {\n    console.log(`changeItemParentHandler  ${currentItem.name} | ${newParent} `);\n    setItems((prevState) => {\n      //displayItems(items);\n      return prevState.map((e) => {\n        return {\n          ...e,\n          currentParent:\n            e.name === currentItem.name ? newParent : e.currentParent,\n        };\n      });\n    });\n    //console.log(`end...`);\n    //displayItems(items);\n  };\n\n  // TODO  resolve this function\n  // 1. Why when dropping is there no hover index?\n  // 2. Add function so the items Collection is remade in the correct order\n  const moveItemHandler = (dragIndex: number, hoverIndex: number): void => {\n    //console.log(`New - moveItemHandler | ${dragIndex} | ${hoverIndex}`);\n\n    const dragItem = items[dragIndex];\n    //console.log(`the item we are about to reorder is: ${dragItem.name}`);\n\n    if (dragItem) {\n      setItems((prevState) => {\n        const coppiedStateArray = [...prevState];\n        // remove the item with the \"hoverIndex\" and replace it with the \"dragItem\" instead\n        const prevItem = coppiedStateArray.splice(hoverIndex, 1, dragItem);\n\n        coppiedStateArray.splice(dragIndex, 1, prevItem[0]);\n\n        return coppiedStateArray;\n      });\n    }\n  };\n\n  // TODO work out the exact return type here\n  const returnItemsForTileRack = (parentName: string) => {\n    return items\n      .filter((item) => item.currentParent === parentName)\n      .map((item, index) => (\n        <MovableItem\n          changeItemParent={changeItemParentHandler}\n          currentParent={item.currentParent}\n          index={index}\n          key={item.id}\n          moveItemHandler={moveItemHandler}\n          name={`${item.id}-${item.letter}`}\n        >\n          <TileComponent letter={item.letter} score={item.score} />\n        </MovableItem>\n      ));\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <DndProvider backend={isMobile ? TouchBackend : HTML5Backend}>\n          <TileRack tileRackType={INITIAL} className=\"tiles-container initial\">\n            {returnItemsForTileRack(INITIAL)}\n          </TileRack>\n          <TileRack\n            tileRackType={SELECTION}\n            className=\"tiles-container selection\"\n          >\n            {returnItemsForTileRack(SELECTION)}\n          </TileRack>\n        </DndProvider>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n//import reducer from \"./reducers\";\n\n// add dummy Store for now...\nfunction todos(state = [], action: any) {\n  switch (action.types) {\n    default:\n      return state;\n  }\n}\nconst store = createStore(todos);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}